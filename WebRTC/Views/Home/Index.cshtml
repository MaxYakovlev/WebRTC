<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <title>Index</title>
</head>
<body>
    <video id="local-video" style="width:400px; height: 300px; border: 2px solid black;" autoplay></video>
    <video id="remote-video" style="width:400px; height: 300px; border: 2px solid black;" autoplay></video>
    <br />
    <br />
    <button id="start-video">Start video</button>

    <script src="~/js/signalr/dist/browser/signalr.js"></script>
    <script type="text/javascript">
        function onSuccess() { };
        function onError(error) {
            console.error(error);
        };

        let startVideo = document.getElementById("start-video"),
            localVideo = document.getElementById("local-video"),
            remoteVideo = document.getElementById("remote-video"),
            configuration = {
                'iceServers':
                    [{ 'url': 'stun:stun.services.mozilla.com' }, { 'url': 'stun:stun.l.google.com:19302' }]
            },
            pc = new RTCPeerConnection(configuration);;

        const hubConnection = new signalR.HubConnectionBuilder()
            .withUrl("/signal")
            .build();

        hubConnection.start();

        let localDescCreated = (desc) => {
            pc.setLocalDescription(
                desc,
                () => hubConnection.invoke("Send", { 'sdp': pc.localDescription }),
                onError
            );
        }

        startVideo.addEventListener("click", () => {

            pc.onicecandidate = event => {
                if (event.candidate) {
                    hubConnection.invoke("Send", { 'candidate': event.candidate });
                }
            };

            pc.onnegotiationneeded = () => {
                pc.createOffer().then(localDescCreated).catch(onError);
            }

            navigator.mediaDevices.getUserMedia({
                audio: true,
                video: true,
            }).then(stream => {
                localVideo.srcObject = stream;
                pc.addStream(stream);
            }, onError);
        });

        pc.onaddstream = event => {
            remoteVideo.srcObject = event.stream;
        };

        hubConnection.on("Send", data => {
            console.log(data);
            if (data.sdp) {
                pc.setRemoteDescription(new RTCSessionDescription(data.sdp), () => {
                    if (pc.remoteDescription.type === 'offer') {
                        pc.createAnswer().then(localDescCreated).catch(onError);
                    }
                }, onError);
            } else if (data.candidate) {
                pc.addIceCandidate(
                    new RTCIceCandidate(data.candidate), onSuccess, onError
                );
            }
        });
    </script>
</body>
</html>